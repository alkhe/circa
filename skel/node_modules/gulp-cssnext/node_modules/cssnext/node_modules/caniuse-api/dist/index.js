"use strict";

var memoize = require("lodash.memoize");

var browserslist = require("browserslist");

var contains = require("./utils").contains;
var parseCaniuseData = require("./utils").parseCaniuseData;
var cleanBrowsersList = require("./utils").cleanBrowsersList;
var features = require("../features.json");

var browsers;
function setBrowserScope(browserList) {
  browsers = cleanBrowsersList(browserList);
}

function getBrowserScope() {
  return browsers;
}

var parse = memoize(parseCaniuseData, function (feature, browsers) {
  return feature.title + browsers;
});

function getSupport(query) {
  var feature;
  try {
    feature = require("caniuse-db/features-json/" + query);
  } catch (e) {
    var res = find(query);
    if (res.length === 1) return getSupport(res[0]);
    throw new ReferenceError("Please provide a proper feature name");
  }
  return parse(feature, browsers);
}

function isSupported(feature, browsers) {
  var data;
  try {
    data = require("caniuse-db/features-json/" + feature);
  } catch (e) {
    var res = find(feature);
    if (res.length === 1) {
      data = require("caniuse-db/features-json/" + res[0]);
    } else {
      throw new ReferenceError("Please provide a proper feature name");
    }
  }

  return browserslist(browsers).map(function (browser) {
    return browser.split(" ");
  }).every(function (browser) {
    return data.stats[browser[0]][browser[1]] === "y";
  });
}

function find(query) {
  if (~features.indexOf(query)) {
    // exact match
    return query;
  }

  return features.filter(function (file) {
    return contains(file, query);
  });
}

function getLatestStableBrowsers() {
  return browserslist.queries.lastVersions.select(1);
}

setBrowserScope();

exports.getSupport = getSupport;
exports.isSupported = isSupported;
exports.find = find;
exports.getLatestStableBrowsers = getLatestStableBrowsers;
exports.setBrowserScope = setBrowserScope;
exports.getBrowserScope = getBrowserScope;